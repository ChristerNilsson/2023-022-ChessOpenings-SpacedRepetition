// Generated by CoffeeScript 2.5.1
var SIZE, arr, drawSpacedRepetition, help, released, xdraw;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass,
  log,
  range
} from '../js/utils.js';

import {
  Board
} from '../js/board.js';

import {
  Button
} from '../js/button.js';

import {
  clickString,
  global
} from '../js/globals.js';

import {
  SpacedRepetition
} from '../js/spaced_repetition.js';

import {
  Tree
} from '../js/tree.js';

SIZE = global.SIZE;

released = true; // prevention of touch bounce

arr = null;

help = 'Make the most common master move.';

window.preload = () => {
  var j, k, len, len1, letter, ref, ref1, results;
  //arr = loadJSON './data/arr-2014-08.json' # SIZE = 0
  //arr = loadJSON './data/arr-2016-02.json' # SIZE = 1
  //arr = loadJSON './data/arr-2019-06.json' # SIZE = 2
  arr = loadJSON('./data/arr32.json');
  ref = "rnbqkp";
  for (j = 0, len = ref.length; j < len; j++) {
    letter = ref[j];
    global.pics[letter] = loadImage('./images/b' + letter + '.png');
  }
  ref1 = "RNBQKP";
  results = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    letter = ref1[k];
    results.push(global.pics[letter] = loadImage('./images/w' + letter.toLowerCase() + '.png'));
  }
  return results;
};

window.setup = () => {
  var g, j, len, move, moves, sr;
  createCanvas(SIZE * 10.5, SIZE * 10);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  g = global;
  g.tree = new Tree(arr.arr);
  g.board = new Board();
  g.chess = new Chess();
  // g.tree.test()
  g.spacedRepetition = new SpacedRepetition('e2e4.e7e5.g1f3.b8c6.f1c4');
  sr = g.spacedRepetition;
  sr.pick();
  g.chess.reset();
  moves = sr.current().q.split('.');
  for (j = 0, len = moves.length; j < len; j++) {
    move = moves[j];
    g.chess.move({
      from: move.slice(0, 2),
      to: move.slice(2, 4)
    });
  }
  g.board.flipped = moves.length % 2 === 1;
  return xdraw();
};

drawSpacedRepetition = () => {
  var current, g, i, j, len, move, ref, sr, x, y;
  g = global;
  sr = g.spacedRepetition;
  textAlign(LEFT, CENTER);
  current = sr.current();
  if (current) {
    ref = g.chess.history();
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      move = ref[i];
      x = 450 + i % 2 * 35;
      y = 35 + floor(i / 2) * 20;
      fill('black');
      if (i % 2 === 0) {
        text(i / 2 + 1, x - 20, y);
      }
      fill(i < sr.path.split('.').length ? 'lightgray' : ['white', 'black'][i % 2]);
      text(move, x, y);
    }
    if (global.board.clickedSquares.length === 2) { // hint
      textAlign(CENTER, CENTER);
      fill(['white', 'black'][g.chess.history().length % 2]);
      return text(current.a.join(' â€¢ '), SIZE * 4.5, SIZE * 9.5);
    }
  }
};

xdraw = () => {
  var button, j, len, ref;
  background('gray');
  textSize(SIZE);
  global.board.draw();
  ref = global.buttons;
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    button.draw();
  }
  drawSpacedRepetition();
  fill("black");
  textAlign(CENTER, CENTER);
  return text(help, SIZE * 4.5, SIZE * 9.5);
};

// for sq,i in global.board.clickedSquares # debug
// 	text sq,150+40*i,540

// window.keyPressed = =>
// 	if key == 'ArrowLeft' then clickString 'left'
// 	if key == 'ArrowRight'  then clickString 'right'
// 	if key == 'ArrowUp'  then clickString 'up'
// 	if key == 'ArrowDown' then clickString 'down'
// 	if key == ' ' then clickString 'flip'
// 	if key == 'Home' then clickString 'first'
// 	xdraw()
// 	return false
window.mousePressed = () => {
  var button, j, k, len, len1, ref, ref1, square;
  help = '';
  if (!released) {
    return;
  }
  released = false;
  ref = global.buttons.concat(global.board.buttons);
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.inside(mouseX, mouseY)) {
      button.onclick();
      xdraw();
      return false;
    }
  }
  ref1 = global.board.squares;
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    square = ref1[k];
    if (square.inside(mouseX, mouseY)) {
      square.onclick();
      xdraw();
      return false;
    }
  }
  return false;
};

window.mouseReleased = () => {
  released = true;
  return false;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxvQkFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUE7O0FBQUEsT0FBTyxDQUFQLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLEdBQVI7RUFBWSxHQUFaO0VBQWdCLEtBQWhCO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsS0FBUjtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFRLE1BQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxXQUFSO0VBQW9CLE1BQXBCO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVEsZ0JBQVI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUSxJQUFSO0NBQUEsTUFBQTs7QUFFQSxJQUFBLEdBQU8sTUFBTSxDQUFDOztBQUNkLFFBQUEsR0FBVyxLQVRYOztBQVVBLEdBQUEsR0FBTTs7QUFDTixJQUFBLEdBQU87O0FBRVAsTUFBTSxDQUFDLE9BQVAsR0FBaUIsQ0FBQSxDQUFBLEdBQUE7QUFDakIsTUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQTs7OztFQUdDLEdBQUEsR0FBTSxRQUFBLENBQVMsbUJBQVQ7QUFFTjtFQUFBLEtBQUEscUNBQUE7O0lBQ0MsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFELENBQVgsR0FBc0IsU0FBQSxDQUFVLFlBQUEsR0FBZSxNQUFmLEdBQXdCLE1BQWxDO0VBRHZCO0FBRUE7QUFBQTtFQUFBLEtBQUEsd0NBQUE7O2lCQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBRCxDQUFYLEdBQXNCLFNBQUEsQ0FBVSxZQUFBLEdBQWUsTUFBTSxDQUFDLFdBQVAsQ0FBQSxDQUFmLEdBQXNDLE1BQWhEO0VBRHZCLENBQUE7O0FB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QUFDLGFBQVAsR0FBdUIsQ0FBQSxDQUFBLEdBQUE7RUFDdEIsUUFBQSxHQUFXO1NBQ1g7QUFGc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdodHRwczovL2Nkbi5za3lwYWNrLmRldi9sb2Rhc2gnXHJcbmltcG9ydCB7YXNzLGxvZyxyYW5nZX0gZnJvbSAnLi4vanMvdXRpbHMuanMnXHJcbmltcG9ydCB7Qm9hcmR9IGZyb20gJy4uL2pzL2JvYXJkLmpzJ1xyXG5pbXBvcnQge0J1dHRvbn0gZnJvbSAnLi4vanMvYnV0dG9uLmpzJ1xyXG5pbXBvcnQge2NsaWNrU3RyaW5nLGdsb2JhbH0gZnJvbSAnLi4vanMvZ2xvYmFscy5qcydcclxuaW1wb3J0IHtTcGFjZWRSZXBldGl0aW9ufSBmcm9tICcuLi9qcy9zcGFjZWRfcmVwZXRpdGlvbi5qcydcclxuaW1wb3J0IHtUcmVlfSBmcm9tICcuLi9qcy90cmVlLmpzJ1xyXG5cclxuU0laRSA9IGdsb2JhbC5TSVpFXHJcbnJlbGVhc2VkID0gdHJ1ZSAjIHByZXZlbnRpb24gb2YgdG91Y2ggYm91bmNlXHJcbmFyciA9IG51bGxcclxuaGVscCA9ICdNYWtlIHRoZSBtb3N0IGNvbW1vbiBtYXN0ZXIgbW92ZS4nXHJcblxyXG53aW5kb3cucHJlbG9hZCA9ID0+XHJcblx0I2FyciA9IGxvYWRKU09OICcuL2RhdGEvYXJyLTIwMTQtMDguanNvbicgIyBTSVpFID0gMFxyXG5cdCNhcnIgPSBsb2FkSlNPTiAnLi9kYXRhL2Fyci0yMDE2LTAyLmpzb24nICMgU0laRSA9IDFcclxuXHQjYXJyID0gbG9hZEpTT04gJy4vZGF0YS9hcnItMjAxOS0wNi5qc29uJyAjIFNJWkUgPSAyXHJcblx0YXJyID0gbG9hZEpTT04gJy4vZGF0YS9hcnIzMi5qc29uJ1xyXG5cclxuXHRmb3IgbGV0dGVyIGluIFwicm5icWtwXCJcclxuXHRcdGdsb2JhbC5waWNzW2xldHRlcl0gPSBsb2FkSW1hZ2UgJy4vaW1hZ2VzL2InICsgbGV0dGVyICsgJy5wbmcnXHJcblx0Zm9yIGxldHRlciBpbiBcIlJOQlFLUFwiXHJcblx0XHRnbG9iYWwucGljc1tsZXR0ZXJdID0gbG9hZEltYWdlICcuL2ltYWdlcy93JyArIGxldHRlci50b0xvd2VyQ2FzZSgpICsgJy5wbmcnXHJcblxyXG53aW5kb3cuc2V0dXAgPSA9PlxyXG5cdGNyZWF0ZUNhbnZhcyBTSVpFKjEwLjUsIFNJWkUqMTBcclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHJlY3RNb2RlIENFTlRFUlxyXG5cclxuXHRnID0gZ2xvYmFsXHJcblxyXG5cdGcudHJlZSA9IG5ldyBUcmVlIGFyci5hcnJcclxuXHRnLmJvYXJkID0gbmV3IEJvYXJkKClcclxuXHRnLmNoZXNzID0gbmV3IENoZXNzKClcclxuXHQjIGcudHJlZS50ZXN0KClcclxuXHJcblx0Zy5zcGFjZWRSZXBldGl0aW9uID0gbmV3IFNwYWNlZFJlcGV0aXRpb24gJ2UyZTQuZTdlNS5nMWYzLmI4YzYuZjFjNCdcclxuXHRzciA9IGcuc3BhY2VkUmVwZXRpdGlvblxyXG5cclxuXHRzci5waWNrKClcclxuXHJcblx0Zy5jaGVzcy5yZXNldCgpXHJcblx0bW92ZXMgPSBzci5jdXJyZW50KCkucS5zcGxpdCAnLidcclxuXHRmb3IgbW92ZSBpbiBtb3Zlc1xyXG5cdFx0Zy5jaGVzcy5tb3ZlIHtmcm9tOiBtb3ZlLnNsaWNlKDAsMiksIHRvOm1vdmUuc2xpY2UoMiw0KX1cclxuXHRnLmJvYXJkLmZsaXBwZWQgPSBtb3Zlcy5sZW5ndGglMiA9PSAxXHJcblxyXG5cdHhkcmF3KClcclxuXHJcbmRyYXdTcGFjZWRSZXBldGl0aW9uID0gPT5cclxuXHRnID0gZ2xvYmFsXHJcblx0c3IgPSBnLnNwYWNlZFJlcGV0aXRpb25cclxuXHR0ZXh0QWxpZ24gTEVGVCxDRU5URVJcclxuXHRjdXJyZW50ID0gc3IuY3VycmVudCgpXHJcblx0aWYgY3VycmVudFxyXG5cdFx0Zm9yIG1vdmUsaSBpbiBnLmNoZXNzLmhpc3RvcnkoKVxyXG5cdFx0XHR4ID0gNDUwK2klMiAqIDM1XHJcblx0XHRcdHkgPSAzNSArIGZsb29yKGkvMikgKiAyMFxyXG5cdFx0XHRmaWxsICdibGFjaydcclxuXHRcdFx0aWYgaSUyPT0wIHRoZW4gdGV4dCBpLzIrMSwgeC0yMCwgeVxyXG5cdFx0XHRmaWxsIGlmIGkgPCBzci5wYXRoLnNwbGl0KCcuJykubGVuZ3RoIHRoZW4gJ2xpZ2h0Z3JheScgZWxzZSBbJ3doaXRlJywnYmxhY2snXVtpJTJdXHJcblx0XHRcdHRleHQgbW92ZSwgeCx5XHJcblxyXG5cdFx0aWYgZ2xvYmFsLmJvYXJkLmNsaWNrZWRTcXVhcmVzLmxlbmd0aCA9PSAyICMgaGludFxyXG5cdFx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0XHRmaWxsIFsnd2hpdGUnLCdibGFjayddW2cuY2hlc3MuaGlzdG9yeSgpLmxlbmd0aCAlIDJdXHJcblx0XHRcdHRleHQgY3VycmVudC5hLmpvaW4oJyDigKIgJyksIFNJWkUqNC41LCBTSVpFKjkuNVxyXG5cclxueGRyYXcgPSA9PlxyXG5cdGJhY2tncm91bmQgJ2dyYXknXHJcblx0dGV4dFNpemUgU0laRVxyXG5cdGdsb2JhbC5ib2FyZC5kcmF3KClcclxuXHRmb3IgYnV0dG9uIGluIGdsb2JhbC5idXR0b25zXHJcblx0XHRidXR0b24uZHJhdygpXHJcblx0ZHJhd1NwYWNlZFJlcGV0aXRpb24oKVxyXG5cdGZpbGwgXCJibGFja1wiXHJcblx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHR0ZXh0IGhlbHAsIFNJWkUqNC41LCBTSVpFKjkuNVxyXG5cclxuXHQjIGZvciBzcSxpIGluIGdsb2JhbC5ib2FyZC5jbGlja2VkU3F1YXJlcyAjIGRlYnVnXHJcblx0IyBcdHRleHQgc3EsMTUwKzQwKmksNTQwXHJcblxyXG4jIHdpbmRvdy5rZXlQcmVzc2VkID0gPT5cclxuIyBcdGlmIGtleSA9PSAnQXJyb3dMZWZ0JyB0aGVuIGNsaWNrU3RyaW5nICdsZWZ0J1xyXG4jIFx0aWYga2V5ID09ICdBcnJvd1JpZ2h0JyAgdGhlbiBjbGlja1N0cmluZyAncmlnaHQnXHJcbiMgXHRpZiBrZXkgPT0gJ0Fycm93VXAnICB0aGVuIGNsaWNrU3RyaW5nICd1cCdcclxuIyBcdGlmIGtleSA9PSAnQXJyb3dEb3duJyB0aGVuIGNsaWNrU3RyaW5nICdkb3duJ1xyXG4jIFx0aWYga2V5ID09ICcgJyB0aGVuIGNsaWNrU3RyaW5nICdmbGlwJ1xyXG4jIFx0aWYga2V5ID09ICdIb21lJyB0aGVuIGNsaWNrU3RyaW5nICdmaXJzdCdcclxuIyBcdHhkcmF3KClcclxuIyBcdHJldHVybiBmYWxzZVxyXG5cclxud2luZG93Lm1vdXNlUHJlc3NlZCA9ID0+XHJcblx0aGVscCA9ICcnXHJcblx0aWYgbm90IHJlbGVhc2VkIHRoZW4gcmV0dXJuXHJcblx0cmVsZWFzZWQgPWZhbHNlXHJcblx0Zm9yIGJ1dHRvbiBpbiBnbG9iYWwuYnV0dG9ucy5jb25jYXQgZ2xvYmFsLmJvYXJkLmJ1dHRvbnNcclxuXHRcdGlmIGJ1dHRvbi5pbnNpZGUgbW91c2VYLG1vdXNlWVxyXG5cdFx0XHRidXR0b24ub25jbGljaygpXHJcblx0XHRcdHhkcmF3KClcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0Zm9yIHNxdWFyZSBpbiBnbG9iYWwuYm9hcmQuc3F1YXJlc1xyXG5cdFx0aWYgc3F1YXJlLmluc2lkZSBtb3VzZVgsbW91c2VZXHJcblx0XHRcdHNxdWFyZS5vbmNsaWNrKClcclxuXHRcdFx0eGRyYXcoKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRmYWxzZVxyXG5cclxud2luZG93Lm1vdXNlUmVsZWFzZWQgPSA9PlxyXG5cdHJlbGVhc2VkID0gdHJ1ZVxyXG5cdGZhbHNlIl19
//# sourceURL=c:\github\2023-022-ChessOpenings-SpacedRepetition\coffee\sketch.coffee