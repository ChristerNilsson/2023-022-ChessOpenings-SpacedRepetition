// Generated by CoffeeScript 2.5.1
var SIZE, arr, drawSpacedRepetition, released, xdraw;

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass,
  log,
  range
} from '../js/utils.js';

import {
  Board
} from '../js/board.js';

import {
  Button
} from '../js/button.js';

import {
  clickString,
  global
} from '../js/globals.js';

import {
  SpacedRepetition
} from '../js/spaced_repetition.js';

import {
  Tree
} from '../js/tree.js';

SIZE = global.SIZE;

released = true; // prevention of touch bounce

arr = null;

window.preload = () => {
  var j, k, len, len1, letter, ref, ref1, results;
  //arr = loadJSON './data/arr-2014-08.json' # SIZE = 0
  //arr = loadJSON './data/arr-2016-02.json' # SIZE = 1
  arr = loadJSON('./data/arr-2019-06.json'); // SIZE = 2
  ref = "rnbqkp";
  for (j = 0, len = ref.length; j < len; j++) {
    letter = ref[j];
    global.pics[letter] = loadImage('./images/b' + letter + '.png');
  }
  ref1 = "RNBQKP";
  results = [];
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    letter = ref1[k];
    results.push(global.pics[letter] = loadImage('./images/w' + letter.toLowerCase() + '.png'));
  }
  return results;
};

window.setup = () => {
  var g, i, j, len, ref;
  createCanvas(SIZE * 10.3, SIZE * 11);
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  g = global;
  g.tree = new Tree(arr.arr);
  g.board = new Board();
  g.chess = new Chess();
  g.tree.test();
  g.spacedRepetition = new SpacedRepetition();
  g.path1 = 'e2e4.e7e5.g1f3.b8c6.f1c4';
  g.path2 = 'e2e4.e7e5.g1f3.b8c6.b1c3';
  g.start = g.tree.getStart(g.path1);
  g.stopp = g.tree.getStart(g.path2);
  g.questions = g.tree.getQuestions(g.start, g.stopp); // array med index till stora arrayen
  g.index = 0;
  g.path = g.tree.getPath(g.questions[g.index]);
  g.answers = g.tree.facit(g.questions[g.index], g.stopp);
  ref = range(5);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    g.spacedRepetition.add({
      q: g.tree.getPath(g.questions[g.index]),
      a: g.tree.facit(g.questions[g.index], g.stopp)
    });
    g.index++;
  }
  g.spacedRepetition.pick();
  return xdraw();
};

drawSpacedRepetition = () => {
  var box, current, i, j, k, len, len1, move, ref, ref1, sr, x, y;
  sr = global.spacedRepetition;
  textAlign(LEFT, CENTER);
  ref = sr.boxes;
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    box = ref[i];
    text(box.length, 40 + 40 * i, 500);
  }
  current = sr.current();
  if (current) {
    ref1 = global.chess.history();
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      move = ref1[i];
      x = 450 + i % 2 * 35;
      y = 40 + floor(i / 2) * 20;
      if (i % 2 === 0) {
        text(i / 2 + 1, x - 20, y);
      }
      text(move, x, y);
    }
    return text(current.a[0][0], 40, 540);
  }
};

xdraw = () => {
  var button, j, len, ref;
  background('gray');
  textSize(SIZE);
  global.board.draw();
  ref = global.buttons;
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    button.draw();
  }
  return drawSpacedRepetition();
};

// window.keyPressed = =>
// 	if key == 'ArrowLeft' then clickString 'left'
// 	if key == 'ArrowRight'  then clickString 'right'
// 	if key == 'ArrowUp'  then clickString 'up'
// 	if key == 'ArrowDown' then clickString 'down'
// 	if key == ' ' then clickString 'flip'
// 	if key == 'Home' then clickString 'first'
// 	xdraw()
// 	return false
window.mousePressed = () => {
  var button, j, k, len, len1, ref, ref1, square;
  if (!released) {
    return;
  }
  released = false;
  ref = global.buttons.concat(global.board.buttons);
  for (j = 0, len = ref.length; j < len; j++) {
    button = ref[j];
    if (button.inside(mouseX, mouseY)) {
      button.onclick();
      xdraw();
      return false;
    }
  }
  ref1 = global.board.squares;
  for (k = 0, len1 = ref1.length; k < len1; k++) {
    square = ref1[k];
    if (square.inside(mouseX, mouseY)) {
      square.onclick();
      xdraw();
      return false;
    }
  }
  return false;
};

window.mouseReleased = () => {
  released = true;
  return false;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-022-ChessOpenings-SpacedRepetition\coffee\sketch.coffee