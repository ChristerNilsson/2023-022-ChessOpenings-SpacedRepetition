// Generated by CoffeeScript 2.5.1
var SIZE,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

import _ from 'https://cdn.skypack.dev/lodash';

import {
  ass,
  lerp,
  param,
  range,
  hexToBase64
} from '../js/utils.js';

import {
  // import cryptoJs from 'https://cdn.skypack.dev/crypto-js'
  Square
} from '../js/square.js';

import {
  Button
} from '../js/button.js';

import {
  coords,
  clickString,
  global,
  toObjectNotation,
  toUCI
} from '../js/globals.js';

import {
  dumpState
} from '../js/globals.js';

SIZE = global.SIZE;

export var Board = class Board {
  constructor() {
    var i, k, len, ref, x0, x1, x2, x3;
    this.click = this.click.bind(this);
    this.draw = this.draw.bind(this);
    // @showChildren()
    this.littera = this.littera.bind(this);
    this.flip = this.flip.bind(this);
    this.squares = [];
    this.clickedSquares = [];
    this.pieces = "";
    this.flipped = false;
    ref = range(64);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ((i) => {
        return this.squares.push(new Square(i, () => {
          return this.click(i);
        }));
      })(i);
    }
    this.buttons = [];
    x0 = 1.5;
    x1 = 3.5;
    x2 = 5.5;
    x3 = 7.5;
    this.buttons.push(new Button(x0 * SIZE, 9.5 * SIZE, 'correct', () => {
      return clickString('correct');
    }));
    this.buttons.push(new Button(x1 * SIZE, 9.5 * SIZE, 'wrong', () => {
      return clickString('wrong');
    }));
    this.buttons.push(new Button(x2 * SIZE, 9.5 * SIZE, 'link', () => {}));
    this.buttons.push(new Button(x3 * SIZE, 9.5 * SIZE, 'debug', () => {}));
  }

  click(i) {
    var col, color, move, row, sq, uci;
    col = modulo(i, 8);
    row = 7 - Math.floor(i / 8);
    sq = global.chess.board()[row][col];
    color = "wb"[modulo(global.chess.history().length, 2)];
    if (this.clickedSquares.length === 0) {
      if (sq !== null && sq.color === color) {
        return this.clickedSquares.push(i);
      }
    } else {
      if (i === this.clickedSquares[0]) {
        return this.clickedSquares = [];
      } else {
        this.clickedSquares.push(i);
        move = toObjectNotation(this.clickedSquares);
        uci = toUCI(this.clickedSquares);
        if (global.chess.move(move)) { // accepera draget
          global.stack.push(global.currNode);
          // console.log uci,global.currNode
          if (!(uci in global.currNode)) {
            global.currNode[uci] = {};
            global.count++;
          }
          global.currNode = global.currNode[uci];
        }
        return this.clickedSquares = [];
      }
    }
  }

  draw() {
    var button, i, j, k, l, len, len1, len2, m, n, piece, ref, ref1, ref2, score;
    this.buttons[3].text = global.count > 0 ? 'save ' + global.count : "";
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    // if not global.tree then return
    fill('white');
    textSize(SIZE * 0.3);
    push();
    textAlign(LEFT, CENTER);
    text(global.name, 0.05 * SIZE, 0.3 * SIZE);
    pop();
    ref1 = range(8);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      ref2 = range(8);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        j = ref2[m];
        piece = global.chess.board()[7 - i][j];
        this.squares[i * 8 + j].draw(piece, this.flipped, i * 8 + j === this.clickedSquares[0]);
      }
    }
    stroke('black');
    noFill();
    rect(SIZE * 4.5, SIZE * 4.5, SIZE * 8, SIZE * 8);
    this.littera();
    push();
    textAlign(CENTER, CENTER);
    text(global.version, 7.5 * SIZE, 10 * SIZE);
    //textAlign RIGHT,CENTER
    textSize(20);
    n = global.stack.length;
    if (n === 0) {
      score = '0';
    }
    if (n % 2 === 0) {
      fill('white');
    } else {
      fill('black');
    }
    text(1 + Math.floor(n / 2), 9.4 * SIZE, 0.3 * SIZE);
    return pop();
  }

  littera() {
    var digits, i, k, len, letters, ref, results;
    noStroke();
    fill('black');
    textSize(SIZE * 0.3);
    letters = this.flipped ? "hgfedcba" : "abcdefgh";
    digits = this.flipped ? "12345678" : "87654321";
    ref = range(8);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      text(letters[i], SIZE * (i + 1), SIZE * 8.8);
      results.push(text(digits[i], SIZE * 0.15, SIZE * (i + 1)));
    }
    return results;
  }

  flip() {
    return this.flipped = !this.flipped;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-022-ChessOpenings-SpacedRepetition\coffee\board.coffee