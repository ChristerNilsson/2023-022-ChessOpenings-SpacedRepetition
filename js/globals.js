// Generated by CoffeeScript 2.5.1
var f, g, link, sortera, undo,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

import {
  ass,
  log,
  range,
  split,
  param,
  hexToBase64,
  spaceShip
} from '../js/utils.js';

import {
  Button
} from '../js/button.js';

import _ from 'https://cdn.skypack.dev/lodash';

import cryptoJs from 'https://cdn.skypack.dev/crypto-js';

import {
  download
} from '../js/download.js';

export var global = {
  //name : 'bishop',
  name: 'tree',
  version: 'ver: B',
  board: null,
  child: 0, // move under consideration
  children: [], // sorted list of [value,san,uci]
  SIZE: 50, // of square
  pics: {}, // 12 pjäser
  data: null,
  buttons: [],
  database: {}, // fen => value
  currTree: 0, // index till träden
  currNode: null, // pekar in i ett träd
  count: 0, // räknar antal nya drag i trädet
  stack: [] // innehåller aktuell gren
};

export var coords = (uci) => {
  var c0, c1, r0, r1;
  param.String(uci);
  c0 = "abcdefgh".indexOf(uci[0]);
  r0 = "12345678".indexOf(uci[1]);
  c1 = "abcdefgh".indexOf(uci[2]);
  r1 = "12345678".indexOf(uci[3]);
  return param.Array([c0 + 8 * r0, c1 + 8 * r1]);
};

ass([8, 24], coords("a2a4"));

export var toUCI = ([from, to]) => {
  var c0, c1, r0, r1;
  param.Integer(from);
  param.Integer(to);
  c0 = "abcdefgh"[from % 8];
  r0 = "12345678"[Math.floor(from / 8)];
  c1 = "abcdefgh"[to % 8];
  r1 = "12345678"[Math.floor(to / 8)];
  return param.String(c0 + r0 + c1 + r1);
};

ass("e2e4", toUCI([12, 28]));

export var toObjectNotation = ([from, to]) => {
  var uci;
  param.Integer(from);
  param.Integer(to);
  uci = toUCI([from, to]);
  from = uci.slice(0, 2);
  to = uci.slice(2, 4);
  return param.Object({from, to});
};

ass({
  from: 'e2',
  to: 'e4'
}, toObjectNotation([12, 28]));

export var empty = (n) => {
  param.Integer(n);
  return param.String((1 + Math.floor(n / 8)).toString());
};

undo = () => {
  if (global.stack.length === 0) {
    return;
  }
  global.chess.undo();
  global.currNode = global.stack.pop();
  return makeChildren();
};

export var dumpState = () => {
  console.log('STATE ########');
  console.log('  stack', global.stack);
  console.log('  currNode', global.currNode);
  return console.log('  history', global.chess.history());
};

export var makeChildren = () => {
  var base64, fen, i, j, key, keys, len, pair, ref, san, value;
  console.log('makeChildren');
  keys = _.keys(global.currNode);
  global.children = [];
  ref = range(keys.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    key = keys[i];
    pair = coords(key);
    global.chess.move(toObjectNotation(pair));
    fen = global.chess.fen();
    san = _.last(global.chess.history());
    base64 = hexToBase64(cryptoJs.SHA256(fen).toString()).slice(0, 8);
    value = global.database[base64] === null ? "?99" : global.database[base64];
    global.children.push([value, san, key]);
    console.log(key, san, base64, value, fen);
    global.chess.undo();
  }
  global.children = sortera(global.children);
  if (modulo(global.stack.length, 2) === 0) {
    global.children.reverse();
  }
  global.child = 0;
  return console.log('children', global.children);
};

sortera = (arr) => { // Hanterar ej mattar av olika längd. 
  // #1 och #2 ersätts båda med 9999
  // #-1 och #-2 ersätts båda med -9999
  // Bör: #1 > #2
  // Är: #1 == #2
  param.Array(arr);
  arr = _.map(arr, ([a, b, c]) => {
    if (typeof a === 'number') {
      return [a, b, c];
    }
    if (indexOf.call(a, '-') >= 0) {
      return [-9999, b, c];
    } else {
      return [9999, b, c];
    }
  });
  return arr.sort((a, b) => {
    return spaceShip(a[0], b[0]);
  });
};

ass([[2, "Nf3", "g1f3"], [11, "e4", "e2e4"]], sortera([[11, "e4", "e2e4"], [2, "Nf3", "g1f3"]]));

ass([[-9999, "Nf3", "g1f3"], [9999, "e4", "e2e4"]], sortera([["#1", "e4", "e2e4"], ["#-2", "Nf3", "g1f3"]]));

ass([[-9999, "Nf3", "g1f3"], [11, "e4", "e2e4"]], sortera([[11, "e4", "e2e4"], ["#-2", "Nf3", "g1f3"]]));

export var loadTree = (delta) => {
  param.Test(delta === (-1) || delta === 0 || delta === 1);
  global.currTree = modulo(global.currTree + delta, _.size(global.trees));
  global.currNode = global.tree; //.moves[""]
  global.stack = [];
  return makeChildren();
};

g = (item) => {
  // param.Integer item or param.String
  if (indexOf.call(item, "#-") >= 0) {
    return -1000;
  }
  if (indexOf.call(item, "#") >= 0) {
    return 1000;
  }
  return param.Integer(parseInt(item));
};

f = (arrScore, c) => {
  var a, b, d;
  param.Array(arrScore);
  param.String(c);
  arrScore = _.map(arrScore, (item) => {
    return g(item);
  });
  a = _.min(arrScore);
  b = _.max(arrScore);
  c = g(c);
  d = _.max([Math.abs(a), Math.abs(b)]);
  a = -d;
  return param.Number((c - a) / (2 * d));
};

ass(0, f([-100, 50], '-100'));

ass(0.75, f([-100, 50], '50'));

ass(1, f([-100, 50], '100'));

link = () => {
  return 'https://lichess.org/analysis/' + global.chess.fen();
};

export var clickString = (key) => {
  var san, uci, value;
  param.String(key);
  if (key === 'flip') {
    return global.board.flip();
  } else if (key === 'link') {
    return window.open(link(), '_blank');
  } else if (key === 'up') {
    return global.child = modulo(global.child - 1, global.children.length);
  } else if (key === 'down') {
    return global.child = modulo(global.child + 1, global.children.length);
  } else if (key === 'undo') {
    return undo();
  } else if (key === 'left') {
    return undo();
  } else if (key === 'right') {
    console.log(global.children, global.child);
    [value, san, uci] = global.children[global.child];
    console.log('move', [value, san, uci]);
    global.chess.move(san);
    global.stack.push(global.currNode);
    global.currNode = global.currNode[uci];
    return makeChildren();
  } else if (key === 'save') {
    return download(global.tree, global.name + '.json');
  } else {
    return console.log('unknown key in clickString', key);
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-022-ChessOpenings-SpacedRepetition\coffee\globals.coffee